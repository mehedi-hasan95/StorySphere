// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum userRole {
  USER
  WRITER
  ADMIN
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          userRole   @default(USER)
  accounts      Account[]
  writer        Writer[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  posts         Posts[]
  bookmark      Bookmark[]
  like          Like[]
  comment       Comment[]
}

model Writer {
  id          String  @id @default(cuid())
  userId      String
  bio         String
  education   String
  fb          String?
  x           String?
  authorityIn String
  isVerified  Boolean @default(false)
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Posts {
  id         String     @id @default(cuid())
  title      String
  image      String?
  short_desc String
  content    Json
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt()
  bookmark   Bookmark[]
  like       Like[]
  comment    Comment[]
}

model Bookmark {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
